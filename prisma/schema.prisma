generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model RoomCategory {
  id            Int      @id @default(autoincrement())
  name          String
}

model Room {
  id            Int      @id @default(autoincrement())
  categoryId    String
  deposit       Int?
  area          Int
  address       String
  updatedAt     DateTime @default(now())
  userId        String
  detailAddress String
  title         String
  ym            String
  description   String
  images        String   @db.VarChar(700)
  price         Int
  status        Int      @default(0)
  views         Int      @default(0)
  wished        Int      @default(0)
}

model CommunityCategory {
  id            Int      @id @default(autoincrement())
  name          String
}

model Community {
  id            Int      @id @default(autoincrement())
  categoryId    Int
  images        String
  updatedAt     DateTime @default(now())
  commentid     Int
  userId        String
  description   String
}

model Comment {
  id          Int      @id @default(autoincrement())
  updatedAt   DateTime @updatedAt
  userId      String
  communityId Int
  comment     String
}


model Wishlist {
  id          Int      @id @default(autoincrement())
  userId      String   @unique
  roomIds     String   
}
